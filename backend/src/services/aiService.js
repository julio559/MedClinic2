const { Analysis, AnalysisResult, MedicalImage, Patient } = require('../models');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');

// Configurar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const processWithAI = async (analysisId) => {
  try {
    const analysis = await Analysis.findByPk(analysisId, {
      include: [
        { model: MedicalImage },
        { model: Patient }
      ]
    });

    if (!analysis) {
      throw new Error('An√°lise n√£o encontrada');
    }

    console.log(`ü§ñ Iniciando an√°lise de IA REAL para: ${analysis.title}`);

    // Atualizar status para processando
    await analysis.update({ status: 'processing' });

    // Preparar prompt m√©dico especializado
    const medicalPrompt = buildMedicalPrompt(analysis);
    
    // Processar imagens se houver
    let imageAnalysis = '';
    if (analysis.MedicalImages && analysis.MedicalImages.length > 0) {
      imageAnalysis = await analyzeImages(analysis.MedicalImages);
    }

    // Realizar an√°lise m√©dica completa com OpenAI
    const aiAnalysis = await performMedicalAnalysis(medicalPrompt, imageAnalysis);

    // Salvar resultados no banco
    const savedResults = await saveAnalysisResults(analysis.id, aiAnalysis);

    // Calcular confian√ßa m√©dia
    const avgConfidence = savedResults.reduce((acc, r) => acc + r.confidenceScore, 0) / savedResults.length;

    // Atualizar an√°lise como conclu√≠da
    await analysis.update({
      status: 'completed',
      aiConfidenceScore: avgConfidence
    });

    console.log(`‚úÖ An√°lise de IA REAL conclu√≠da: ${analysis.title} (${Math.round(avgConfidence * 100)}% confian√ßa)`);

    // Notificar via Socket.IO se dispon√≠vel
    if (global.socketIO) {
      global.socketIO.to(`doctor_${analysis.doctorId}`).emit('analysis_completed', {
        analysisId: analysis.id,
        title: analysis.title,
        confidence: avgConfidence,
        resultsCount: savedResults.length,
        message: 'An√°lise de IA conclu√≠da com OpenAI!'
      });
    }

    return {
      success: true,
      analysisId: analysis.id,
      confidence: avgConfidence,
      resultsCount: savedResults.length
    };

  } catch (error) {
    console.error('‚ùå Erro no processamento de IA:', error);
    
    // Marcar como falhou
    await Analysis.update(
      { status: 'failed' }, 
      { where: { id: analysisId } }
    );
    
    throw error;
  }
};

const buildMedicalPrompt = (analysis) => {
  const patient = analysis.Patient;
  
  return `AN√ÅLISE M√âDICA ESPECIALIZADA - SISTEMA DE IA M√âDICA

DADOS DO PACIENTE:
- Nome: ${patient?.name || 'N√£o informado'}
- Idade: ${patient?.birthDate ? calculateAge(patient.birthDate) : 'N√£o informada'}
- G√™nero: ${patient?.gender || 'N√£o informado'}
- Hist√≥rico m√©dico: ${patient?.medicalHistory || 'N√£o informado'}
- Alergias: ${patient?.allergies || 'N√£o informadas'}

CASO CL√çNICO ATUAL:
- T√≠tulo: ${analysis.title}
- Hist√≥ria da doen√ßa: ${analysis.description || 'N√£o fornecida'}
- Sintomas e exame f√≠sico: ${analysis.symptoms || 'N√£o fornecidos'}

INSTRU√á√ïES PARA AN√ÅLISE:
Voc√™ √© um sistema de IA m√©dica especializada. Realize uma an√°lise m√©dica completa e detalhada baseada nos dados apresentados.

IMPORTANTE: 
- Use conhecimento m√©dico atualizado baseado em evid√™ncias cient√≠ficas
- Seja espec√≠fico e detalhado em cada categoria
- Considere diagn√≥sticos diferenciais relevantes
- Valores de confian√ßa devem ser realistas (0.70 a 0.95)
- Use terminologia m√©dica apropriada
- Base suas conclus√µes em guidelines m√©dicos atualizados

Forne√ßa sua resposta em formato JSON v√°lido com exatamente estas 7 categorias:

{
  "diagnostico_principal": {
    "resultado": "Diagn√≥stico mais prov√°vel com base nos achados cl√≠nicos apresentados",
    "confianca": 0.85,
    "justificativa": "Explica√ß√£o detalhada do racioc√≠nio diagn√≥stico baseado em evid√™ncias"
  },
  "etiologia": {
    "resultado": "Principais causas e fatores etiol√≥gicos identificados",
    "confianca": 0.80,
    "justificativa": "Base cient√≠fica e fatores de risco para as causas propostas"
  },
  "fisiopatologia": {
    "resultado": "Mecanismos fisiopatol√≥gicos e processos biol√≥gicos envolvidos",
    "confianca": 0.82,
    "justificativa": "Explica√ß√£o dos processos moleculares e celulares relevantes"
  },
  "apresentacao_clinica": {
    "resultado": "Caracter√≠sticas cl√≠nicas t√≠picas, varia√ß√µes e correla√ß√£o com o caso",
    "confianca": 0.88,
    "justificativa": "An√°lise das manifesta√ß√µes cl√≠nicas observadas"
  },
  "abordagem_diagnostica": {
    "resultado": "Exames complementares recomendados e crit√©rios diagn√≥sticos",
    "confianca": 0.85,
    "justificativa": "Estrat√©gia diagn√≥stica baseada em protocolos atualizados"
  },
  "abordagem_terapeutica": {
    "resultado": "Op√ß√µes de tratamento e manejo cl√≠nico recomendados",
    "confianca": 0.83,
    "justificativa": "Recomenda√ß√µes terap√™uticas baseadas em evid√™ncias cient√≠ficas"
  },
  "guia_prescricao": {
    "resultado": "Prescri√ß√µes espec√≠ficas com medica√ß√µes, dosagens e orienta√ß√µes",
    "confianca": 0.86,
    "justificativa": "Base farmacol√≥gica, posol√≥gica e considera√ß√µes cl√≠nicas"
  }
}

RESPONDA APENAS COM O JSON V√ÅLIDO, SEM TEXTO ADICIONAL.`;
};

const analyzeImages = async (medicalImages) => {
  try {
    console.log(`üñºÔ∏è Analisando ${medicalImages.length} imagem(ns) m√©dica(s) com GPT-4 Vision`);
    
    const imageAnalyses = [];
    
    for (const image of medicalImages) {
      try {
        // Verificar se o arquivo existe
        if (!fs.existsSync(image.filePath)) {
          console.warn(`Arquivo de imagem n√£o encontrado: ${image.filePath}`);
          continue;
        }

        // Converter imagem para base64
        const imageBuffer = fs.readFileSync(image.filePath);
        const base64Image = imageBuffer.toString('base64');
        const mimeType = image.mimeType || 'image/jpeg';

        // Analisar imagem com GPT-4 Vision
        const response = await openai.chat.completions.create({
          model: "gpt-4-vision-preview",
          messages: [
            {
              role: "system",
              content: "Voc√™ √© um radiologista especialista. Analise esta imagem m√©dica com precis√£o t√©cnica e use terminologia m√©dica apropriada."
            },
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: `Analise esta imagem m√©dica em detalhes. Forne√ßa:

1. TIPO DE EXAME: Identifique o tipo de imagem/exame realizado
2. T√âCNICA E QUALIDADE: Avalie a qualidade t√©cnica da imagem
3. ACHADOS ANAT√îMICOS: Descreva estruturas anat√¥micas vis√≠veis
4. ACHADOS PATOL√ìGICOS: Identifique altera√ß√µes, les√µes ou anormalidades
5. LOCALIZA√á√ÉO: Especifique localiza√ß√£o anat√¥mica precisa dos achados
6. CARACTER√çSTICAS: Descreva tamanho, forma, densidade, intensidade de sinal
7. DIAGN√ìSTICOS DIFERENCIAIS: Liste poss√≠veis diagn√≥sticos baseados na imagem
8. RECOMENDA√á√ïES: Sugira investiga√ß√µes adicionais se necess√°rio

Use terminologia radiol√≥gica precisa e seja espec√≠fico nos achados.`
                },
                {
                  type: "image_url",
                  image_url: {
                    url: `data:${mimeType};base64,${base64Image}`,
                    detail: "high"
                  }
                }
              ]
            }
          ],
          max_tokens: 1500,
          temperature: 0.2
        });

        const imageAnalysis = response.choices[0].message.content;
        imageAnalyses.push({
          filename: image.originalName,
          type: image.imageType,
          analysis: imageAnalysis
        });

        console.log(`‚úÖ Imagem analisada com GPT-4V: ${image.originalName}`);

      } catch (imageError) {
        console.error(`Erro ao analisar imagem ${image.originalName}:`, imageError);
        imageAnalyses.push({
          filename: image.originalName,
          analysis: 'An√°lise de imagem temporariamente indispon√≠vel devido a limita√ß√µes t√©cnicas.'
        });
      }
    }

    return imageAnalyses.length > 0 ? 
      `\n\nAN√ÅLISE DAS IMAGENS M√âDICAS ANEXADAS:\n${imageAnalyses.map(img => 
        `\nIMAGEM: ${img.filename} (${img.type})\nAN√ÅLISE RADIOL√ìGICA: ${img.analysis}`
      ).join('\n\n')}` : '';

  } catch (error) {
    console.error('Erro na an√°lise de imagens:', error);
    return '\n\nAN√ÅLISE DE IMAGENS: N√£o foi poss√≠vel processar as imagens anexadas.';
  }
};

const performMedicalAnalysis = async (prompt, imageAnalysis) => {
  try {
    console.log('üß† Realizando an√°lise m√©dica completa com GPT-4 Turbo...');

    const fullPrompt = prompt + imageAnalysis;

    const response = await openai.chat.completions.create({
      model: "gpt-4-turbo-preview",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© um sistema de IA m√©dica especializada com conhecimento abrangente e atualizado. 
          Forne√ßa an√°lises m√©dicas precisas, detalhadas e baseadas em evid√™ncias cient√≠ficas s√≥lidas.
          Use guidelines m√©dicos internacionais atualizados e literatura cient√≠fica recente.
          Seja espec√≠fico em diagn√≥sticos, tratamentos e recomenda√ß√µes.
          Sempre responda em formato JSON v√°lido conforme solicitado.
          Mantenha alta precis√£o t√©cnica e use terminologia m√©dica apropriada.`
        },
        {
          role: "user",
          content: fullPrompt
        }
      ],
      temperature: 0.3, // Baixa temperatura para precis√£o
      max_tokens: 4000,
      response_format: { type: "json_object" }
    });

    const aiResponse = response.choices[0].message.content;
    console.log('‚úÖ An√°lise OpenAI conclu√≠da - Tokens usados:', response.usage?.total_tokens || 'N/A');

    // Parse e valida√ß√£o do JSON
    let analysisData;
    try {
      analysisData = JSON.parse(aiResponse);
      console.log('‚úÖ JSON parsing bem-sucedido');
    } catch (parseError) {
      console.error('Erro ao fazer parse do JSON da OpenAI:', parseError);
      throw new Error('Resposta da IA em formato inv√°lido');
    }

    // Validar estrutura do JSON
    const requiredCategories = [
      'diagnostico_principal', 'etiologia', 'fisiopatologia', 
      'apresentacao_clinica', 'abordagem_diagnostica', 
      'abordagem_terapeutica', 'guia_prescricao'
    ];

    for (const category of requiredCategories) {
      if (!analysisData[category]) {
        console.warn(`Categoria ausente: ${category}`);
        analysisData[category] = {
          resultado: 'Informa√ß√£o n√£o dispon√≠vel nesta categoria.',
          confianca: 0.5,
          justificativa: 'Dados insuficientes para an√°lise completa.'
        };
      }
    }

    return analysisData;

  } catch (error) {
    console.error('Erro na an√°lise m√©dica com OpenAI:', error);
    
    // Fallback seguro em caso de erro da OpenAI
    return {
      diagnostico_principal: {
        resultado: 'An√°lise m√©dica temporariamente indispon√≠vel. Consulte um m√©dico especialista para avalia√ß√£o presencial.',
        confianca: 0.5,
        justificativa: 'Erro t√©cnico no processamento da IA m√©dica. Recomenda-se consulta m√©dica presencial.'
      },
      etiologia: {
        resultado: 'Avalia√ß√£o etiol√≥gica requer consulta m√©dica especializada.',
        confianca: 0.5,
        justificativa: 'Limita√ß√£o t√©cnica do sistema de IA.'
      },
      fisiopatologia: {
        resultado: 'An√°lise fisiopatol√≥gica deve ser realizada por m√©dico qualificado.',
        confianca: 0.5,
        justificativa: 'Processo automatizado temporariamente indispon√≠vel.'
      },
      apresentacao_clinica: {
        resultado: 'Apresenta√ß√£o cl√≠nica deve ser avaliada em consulta m√©dica.',
        confianca: 0.5,
        justificativa: 'Sistema de IA com limita√ß√£o t√©cnica tempor√°ria.'
      },
      abordagem_diagnostica: {
        resultado: 'Estrat√©gia diagn√≥stica deve ser definida por m√©dico especialista.',
        confianca: 0.5,
        justificativa: 'Recomenda√ß√£o de seguran√ßa para consulta m√©dica.'
      },
      abordagem_terapeutica: {
        resultado: 'Tratamento deve ser prescrito exclusivamente por m√©dico habilitado.',
        confianca: 0.5,
        justificativa: 'Protocolo de seguran√ßa m√©dica obrigat√≥rio.'
      },
      guia_prescricao: {
        resultado: 'Prescri√ß√µes devem ser feitas exclusivamente por m√©dico respons√°vel.',
        confianca: 0.5,
        justificativa: 'Exig√™ncia legal e √©tica m√©dica.'
      }
    };
  }
};

const saveAnalysisResults = async (analysisId, aiAnalysis) => {
  try {
    console.log('üíæ Salvando resultados da an√°lise OpenAI...');

    const categoryMapping = {
      'diagnostico_principal': 'Diagn√≥stico Principal',
      'etiologia': 'Etiologia',
      'fisiopatologia': 'Fisiopatologia', 
      'apresentacao_clinica': 'Apresenta√ß√£o Cl√≠nica',
      'abordagem_diagnostica': 'Abordagem Diagn√≥stica',
      'abordagem_terapeutica': 'Abordagem Terap√™utica',
      'guia_prescricao': 'Guia de Prescri√ß√£o'
    };

    const savedResults = [];

    for (const [key, categoryName] of Object.entries(categoryMapping)) {
      const categoryData = aiAnalysis[key];
      
      if (categoryData) {
        const result = await AnalysisResult.create({
          category: categoryName,
          result: categoryData.resultado || 'Resultado n√£o dispon√≠vel',
          confidenceScore: Math.min(Math.max(categoryData.confianca || 0.5, 0), 1), // Garantir entre 0 e 1
          aiModel: 'GPT-4-Turbo + GPT-4-Vision',
          isCompleted: true,
          analysisId: analysisId
        });

        savedResults.push(result);
        console.log(`‚úÖ Salvo: ${categoryName} (${Math.round(result.confidenceScore * 100)}% confian√ßa)`);
      }
    }

    console.log(`üíæ ${savedResults.length} resultados salvos com sucesso`);
    return savedResults;

  } catch (error) {
    console.error('Erro ao salvar resultados:', error);
    throw error;
  }
};

// Fun√ß√£o auxiliar para calcular idade
const calculateAge = (birthDate) => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  
  return `${age} anos`;
};

// Fun√ß√£o para validar configura√ß√£o da OpenAI
const validateOpenAIConfig = () => {
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY n√£o configurada no arquivo .env');
    console.error('‚ö†Ô∏è  Sistema funcionar√° em modo simulado');
    return false;
  }
  
  if (!process.env.OPENAI_API_KEY.startsWith('sk-')) {
    console.error('‚ùå OPENAI_API_KEY inv√°lida (deve come√ßar com sk-)');
    return false;
  }
  
  console.log('‚úÖ OpenAI configurada corretamente para uso em produ√ß√£o');
  return true;
};

// Fun√ß√£o de teste da OpenAI
const testOpenAIConnection = async () => {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: "Test connection" }],
      max_tokens: 5
    });
    
    console.log('‚úÖ Conex√£o com OpenAI testada com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o OpenAI:', error.message);
    return false;
  }
};

module.exports = { 
  processWithAI, 
  validateOpenAIConfig,
  testOpenAIConnection
};